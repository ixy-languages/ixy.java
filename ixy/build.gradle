// Include all the plugins this module depends on
plugins {
	id 'c'
	id 'java-library'                                                      // Official Java library plugin
	id 'jacoco'                                                            // Official JaCoCo plugin
	id 'pmd'                                                               // Official PMD plugin
	id 'checkstyle'                                                        // Official Checkstyle plugin
	id 'com.github.gmazzo.buildconfig'                    version '1.5.0'  // Build time constants
	id 'io.freefair.lombok'                               version '4.1.0'  // Lombok
	id 'com.adarshr.test-logger'                          version '1.7.0'  // Gradle Test Logger
	id 'com.github.andygoossens.gradle-modernizer-plugin' version '1.2.0'  // Legacy APIs detector
	id 'com.github.ben-manes.versions'                    version '0.21.0' // Outdated dependencies detector
	id 'com.github.ksoichiro.build.info'                  version '0.2.0'  // Adds Git information to the builds
}

// Set the Java compatibility of the source code and the generated artifact
sourceCompatibility = 1.13
targetCompatibility = 1.13

// Define a set of custom properties which may or may not be useful, but should be inherited from the root project
ext {
	moduleName = 'ixy.library'

	LOG_NONE  = rootProject.ext.has("LOG_NONE")  ? rootProject.ext.LOG_NONE  : 0
	LOG_ERROR = rootProject.ext.has("LOG_ERROR") ? rootProject.ext.LOG_ERROR : 1
	LOG_WARN  = rootProject.ext.has("LOG_WARN")  ? rootProject.ext.LOG_WARN  : 2
	LOG_INFO  = rootProject.ext.has("LOG_INFO")  ? rootProject.ext.LOG_INFO  : 3
	LOG_DEBUG = rootProject.ext.has("LOG_DEBUG") ? rootProject.ext.LOG_DEBUG : 4
	LOG_TRACE = rootProject.ext.has("LOG_TRACE") ? rootProject.ext.LOG_TRACE : 5
	DEBUG     = rootProject.ext.has("DEBUG")     ? rootProject.ext.DEBUG     : LOG_TRACE

	PREFER_UNSAFE  = rootProject.ext.has("PREFER_UNSAFE")  ? rootProject.ext.PREFER_UNSAFE  : 1
	PREFER_JNI     = rootProject.ext.has("PREFER_JNI")     ? rootProject.ext.PREFER_JNI     : 2
	MEMORY_MANAGER = rootProject.ext.has("MEMORY_MANAGER") ? rootProject.ext.MEMORY_MANAGER : PREFER_UNSAFE

	OPTIMIZED = rootProject.ext.has("OPTIMIZED") ? rootProject.ext.OPTIMIZED : false

	DEFAULT_HUGEPAGE_PATH = rootProject.ext.has("DEFAULT_HUGEPAGE_PATH") ? rootProject.ext.DEFAULT_HUGEPAGE_PATH : "/mnt/huge"
}

// Configure the C library
model {
	// Define a custom platform which has no operative system but it is x64
	platforms {
		amd64 {
			architecture 'x86-64'
		}
	}

	// Define our components, which will be basically our C library, targeting our custom platform
	// and add to the compiler flags the include paths of the JNI framework
	components {
		ixy(NativeLibrarySpec) {
			targetPlatform 'amd64'
			binaries.all {
				if (targetPlatform.operatingSystem.macOsX) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
					cCompiler.args '-mmacosx-version-min=10.4'
					linker.args '-mmacosx-version-min=10.4'
				} else if (targetPlatform.operatingSystem.linux) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
					cCompiler.args '-D_FILE_OFFSET_BITS=64'
				} else if (targetPlatform.operatingSystem.windows) {
					cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
					linker.args "Shlwapi.lib", "Advapi32.lib"
				} else if (targetPlatform.operatingSystem.freeBSD) {
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
					cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
				}
			}
		}
	}
}

// Compute the package name without sequential repetition of the different package levels
def FQPN = { ->
	def mPackages = "${project.group}.ixy".split("\\.")
	def previous = mPackages[0]
	for (int i = 1; i < mPackages.length; i += 1)
		if (mPackages[i] == previous) mPackages[i] = null
		else previous = mPackages[i]
	Arrays.stream(mPackages).filter(Objects.&nonNull).toArray().join('.')
}.call()

// Configure the build time constants (allows the compiler to remove dead code)
buildConfig {
	packageName FQPN
	language    'java'

	buildConfigField 'int', 'LOG_NONE',  "${project.LOG_NONE}"
	buildConfigField 'int', 'LOG_ERROR', "${project.LOG_ERROR}"
	buildConfigField 'int', 'LOG_WARN',  "${project.LOG_WARN}"
	buildConfigField 'int', 'LOG_INFO',  "${project.LOG_INFO}"
	buildConfigField 'int', 'LOG_DEBUG', "${project.LOG_DEBUG}"
	buildConfigField 'int', 'LOG_TRACE', "${project.LOG_TRACE}"
	buildConfigField 'int', 'DEBUG',     "${project.DEBUG}"

	buildConfigField 'int', 'PREFER_UNSAFE',   "${project.PREFER_UNSAFE}"
	buildConfigField 'int', 'PREFER_JNI',      "${project.PREFER_JNI}"
	buildConfigField 'int', 'PREFER_JNI_FULL', "${project.PREFER_JNI_FULL}"
	buildConfigField 'int', 'MEMORY_MANAGER',  "${project.MEMORY_MANAGER}"

	buildConfigField 'boolean', 'OPTIMIZED', "${project.OPTIMIZED}"

	buildConfigField 'String', 'DEFAULT_HUGEPAGE_PATH', "\"${project.DEFAULT_HUGEPAGE_PATH}\""
}

// Use the latest JaCoCo version if possible => https://www.eclemma.org/jacoco/
jacoco {
	toolVersion = '0.8.4'
}

// Use the latest PMD version if possible => https://pmd.github.io/#downloads
pmd {
	toolVersion    = '6.16.0'
	ignoreFailures = false
}

// Use the latest SpotBugs version if possible => https://github.com/spotbugs/spotbugs/releases
spotbugs {
	toolVersion    = '4.0.0-beta3'
	ignoreFailures = false
	effort         = 'max'
	reportLevel    = 'medium'
}

// Use the latest Checkstyle version if possible => https://github.com/checkstyle/checkstyle/releases
checkstyle {
	toolVersion    = '8.22'
	ignoreFailures = false
	showViolations = true
	configFile     = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
	reportsDir     = file("${project.buildDir}/reports/checkstyle")
}

// Define the dependencies and the minimum scope needed for them to work
dependencies {
	compileOnly group: 'org.jetbrains',  name: 'annotations',     version: '17.0.0'
	compileOnly group: 'org.slf4j',      name: 'slf4j-api',       version: '1.8.0-beta4'
	compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'

	testCompile group: 'org.jetbrains',       name: 'annotations',          version: '17.0.0'
	testCompile group: 'org.slf4j',           name: 'slf4j-api',            version: '1.8.0-beta4'
	testCompile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.0.0-beta3'
	testCompile group: 'org.projectlombok',   name: 'lombok',               version: '1.18.8'
	testCompile group: 'org.mapstruct',       name: 'mapstruct-processor',  version: '1.3.0.Final'

	testCompile     group: 'org.junit.jupiter', name: 'junit-jupiter-params',  version: '5.5.0-M1'
	testCompile     group: 'org.assertj',       name: 'assertj-core',          version: '3.12.2'
	testCompile     group: 'org.mockito',       name: 'mockito-core',          version: '2.28.2'
	testCompile     group: 'org.mockito',       name: 'mockito-junit-jupiter', version: '2.28.2'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine',  version: '5.5.0-M1'
	testRuntimeOnly group: 'org.slf4j',         name: 'slf4j-nop',             version: '1.8.0-beta4'
}

// Disable the "@Generated" annotation used by the BuildConfig task
tasks.withType(com.github.gmazzo.gradle.plugins.tasks.BuildConfigTask) {
	addGeneratedAnnotation = false
}

// Disable the warning about the Unsafe proprietary API during compilation
tasks.withType(JavaCompile) {
	options.compilerArgs << '-XDignore.symbol.file'
}

// Export the SpotBugs reports in text format only (HTML has a bug)
tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		xml.enabled   = false
		html.enabled  = false
		text.enabled  = true
		emacs.enabled = false
	}
}

// Export the Checkstyle report in HTML format only
tasks.withType(Checkstyle) {
	reports {
		xml.enabled  = false
		html.enabled = true
	}
}

// Add the links to the official documentation
tasks.withType(Javadoc) {
	options.links << 'https://docs.oracle.com/en/java/javase/12/docs/api/'
	options.addBooleanOption('html5', true)
	options.noQualifiers 'all'
}

// Update the task 'compileTestJava' to use '--module-path' and not '--classpath'
compileTestJava {
	inputs.property('moduleName', moduleName)
	doFirst {
		options.compilerArgs = [
				'--module-path',  classpath.asPath,
//				'--add-modules',  'org.junit.jupiter.api',
//				'--add-reads',    "$moduleName=org.junit.jupiter.api",
				'--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
		]
		classpath = files()
	}
}

// Customize the task 'test'
test {
	// Update the task 'test' to consume the output of the updated task 'compileTestJava'
	inputs.property('moduleName', moduleName)
	doFirst {
		jvmArgs = [
				'--module-path',  classpath.asPath,
				'--add-modules',  'ALL-MODULE-PATH',
				'--add-opens',    "ixy.library/de.tum.in.net.ixy.memory.internal=org.junit.platform.commons",
				'--add-opens',    "ixy.library/de.tum.in.net.ixy.memory=org.junit.platform.commons",
				'--add-opens',    "ixy.library/de.tum.in.net.ixy.memory=org.mockito",
//				'--add-reads',    "$moduleName=org.junit.jupiter.api",
				'--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
		]
		classpath = files()
	}

	// Add the native library to the library path during testing
	systemProperty "java.library.path", file("${buildDir}/libs/ixy/shared").absolutePath

	// Enable JUnit 5 and fail as soon as possible
	useJUnitPlatform { failFast = true }

	// Use all processor cores to test
	maxParallelForks = Runtime.runtime.availableProcessors()

	// Configure JUnit to execute things in parallel
	systemProperty 'junit.jupiter.execution.parallel.enabled',         true
	systemProperty 'junit.jupiter.execution.parallel.mode.default',    'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'

	// Configure Gradle's default test logger
	testLogging {
		events = ['passed', 'failed', 'skipped']
		showStandardStreams = true
	}

	// Configure the Gradle Test Logger plugin
	testlogger {
		theme                      'mocha-parallel'
		showExceptions             true
		slowThreshold              2000
		showSummary                true
		showPassed                 true
		showSkipped                true
		showFailed                 true
		showStandardStreams        true
		showPassedStandardStreams  true
		showSkippedStandardStreams true
		showFailedStandardStreams  true
	}
}

// Make JaCoCo be a part of the check command and ensure the tests have been executed then
jacocoTestReport.dependsOn             test
check.dependsOn                        jacocoTestReport
rootProject.jacocoTestReport.dependsOn jacocoTestReport

// Disable PMD, SpotBugs and Checkstyle analyzers for test files
pmdTest.enabled        = false
spotbugsTest.enabled   = false
checkstyleTest.enabled = false

// Add the native library into the JAR
jar {
	into('resources/') {
		from fileTree(dir: file("${buildDir}/libs/ixy/shared").absolutePath, include: '*.so')
	}
}

// Make sure the shared library is built before testing
test.dependsOn 'ixySharedLibrary'
jar.dependsOn 'ixySharedLibrary'
build.dependsOn.remove('check')
